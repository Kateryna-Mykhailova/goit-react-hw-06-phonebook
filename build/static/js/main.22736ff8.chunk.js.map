{"version":3,"sources":["components/Form/Form.module.css","components/Phonebook/Phonebook.module.css","components/Filter/Filter.module.css","components/Form/Form.js","components/Phonebook/Phonebook.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","Form","addNewContact","useState","name","setName","number","setNumber","idName","uuid","idNumber","handleChange","e","target","value","resetForm","className","styles","form","onSubmit","preventDefault","newContact","id","form_name","htmlFor","form_input","type","onChange","pattern","title","required","form_btn","Phonebook","contacts","onDeleteContact","contact_list","map","contact_item","contact_name","contact_delate_btn","onClick","Filter","App","setContacts","filter","setFilter","visibleContacts","normalizedFilter","toLocaleLowerCase","contact","includes","getVisibleContacts","useEffect","console","log","localContacts","localStorage","getItem","parseLocalContacts","JSON","parse","window","setItem","stringify","find","alert","prevState","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22736ff8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__B52z-\",\"form_name\":\"Form_form_name__2ZcK9\",\"form_input\":\"Form_form_input__1XeMz\",\"form_btn\":\"Form_form_btn__3pdlc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"Phonebook_contact_list__1yJBn\",\"contact_item\":\"Phonebook_contact_item__1bRrA\",\"contact_name\":\"Phonebook_contact_name__2Hz_W\",\"contact_delate_btn\":\"Phonebook_contact_delate_btn__3uy4i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_name\":\"Filter_form_name__TZtbn\",\"form_input\":\"Filter_form_input__3vcYZ\"};","import { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport styles from '../Form/Form.module.css';\n\nexport default function Form({ addNewContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // state = {\n  //   name: '',\n  //   number: '',\n  // };\n\n  const idName = uuid();\n  const idNumber = uuid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      name,\n      number,\n      id: uuid(),\n    };\n\n    addNewContact(newContact);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.form_name} htmlFor={idName}>\n        Name\n      </label>\n      <input\n        className={styles.form_input}\n        id={idName}\n        name=\"name\"\n        value={name}\n        type=\"text\"\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n\n      <label className={styles.form_name} htmlFor={idNumber}>\n        Number\n      </label>\n      <input\n        className={styles.form_input}\n        id={idNumber}\n        name=\"number\"\n        value={number}\n        type=\"text\"\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n\n      <button className={styles.form_btn} type=\"submit\">\n        Add\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport styles from '../Phonebook/Phonebook.module.css';\n\nconst Phonebook = ({ contacts, onDeleteContact }) => (\n  <ul className={styles.contact_list}>\n    {contacts.map(({ id, name, number }) => (\n      <li className={styles.contact_item} key={id}>\n        <p className={styles.contact_name}>{name}:</p>\n        <p>{number}</p>\n        <button\n          className={styles.contact_delate_btn}\n          onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default Phonebook;\n","import React from 'react';\nimport styles from '../Filter/Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.form_name}>\n    Find contacts by name\n    <input\n      className={styles.form_input}\n      //  id={this.idFilter }\n      name=\"filter\"\n      value={value}\n      type=\"text\"\n      onChange={onChange}\n      //  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      //  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </label>\n);\n\nexport default Filter;\n\n// export class Filter extends Component{\n//   state = {\n//    filter: ''\n//   };\n// idFilter = uuid();\n\n//     handleChange = e => {\n//     const { name, value } = e.target;\n//       this.setState({\n//        [name]: value,\n//       });\n//       console.log(this.state.filter);\n//     //      const {name} =  this.state\n//     // const findContact = {\n//     //   name\n//     // };\n//   // console.log('kjh');\n//       // this.props.filterContacts(value);\n//           this.props.filterContacts(this.state.filter);\n//   };\n\n//     render() {\n//          const { filter} = this.state;\n//       return (<div>\n//           <label>Find contacts by name\n\n//            <input\n//        id={this.idFilter }\n//        name=\"filter\"\n//        value={filter}\n//        type=\"text\"\n//        onChange={this.handleChange}\n//        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//        required\n//        /></label></div>\n//          )\n//      }\n\n// }\n\n// <p>Find contacts by name</p>\n\n//   <label htmlFor={this.idName}>Name</label>\n//       <input\n//         id={this.idName}\n//         name=\"name\"\n//         value={this.state.name}\n//         type=\"text\"\n//         onChange={this.handleChange}\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//         required\n//       />\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport Phonebook from './components/Phonebook/Phonebook';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const addNewContact = newContact => {\n    contacts.find(contact => contact.name === newContact.name)\n      ? alert(`${newContact.name} already exists`)\n      : setContacts(prevState => [...prevState, newContact]);\n  };\n\n  // setContacts(prevState => [...prevState, {}])\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  useEffect(() => {\n    console.log('oполучаю с лс');\n    const localContacts = localStorage.getItem('contacts');\n    console.log(localContacts);\n    const parseLocalContacts = JSON.parse(localContacts);\n\n    if (parseLocalContacts) {\n      setContacts(parseLocalContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('записываю в лс');\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <Form addNewContact={addNewContact} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <Phonebook contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}